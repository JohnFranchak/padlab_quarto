---
title: ""
execute:
  echo: false
  warning: false
---

::: {.column-page-inset}
# Publications

```{r}
#|output: false
#|echo: false
library(reactable)
library(tidyverse)
library(htmltools)
library(reactablefmtr)
refs <- read_csv("publications/publications.csv") %>% 
  filter(type != "Prep")
```

```{r}
refs_clean <- refs %>%  
  mutate(citation = sprintf("%s (%d). %s %s.", authors, year, title, venue), .after = url) %>% 
  select(-editors, -numbers, -title, -venue) %>% 
  relocate(type, .after = citation) %>%
  relocate(year, .before = authors) %>%
  relocate(abstract, .after = year)
         
reactable(refs_clean, 
          filterable = TRUE, 
          searchable = TRUE, 
          defaultSorted = c("year"), 
          defaultSortOrder = "desc", 
          elementId = "cars-select", 
          showPageSizeOptions = TRUE,
          pageSizeOptions = c(20, 40, 60, 80),
          paginationType = "jump",
          defaultPageSize = 20,
          defaultColDef = colDef(show = FALSE, name = ""),
          columns = list(
              abstract = colDef(show = TRUE, maxWidth = 22, filterable = FALSE,
                  cell = function(value, index) {
                  s <- ""
                  }, details = function(index) {
                                  paste("Abstract: ", refs[index, "abstract"])
                                  }),
              year = colDef(show = TRUE, maxWidth  = 70,
                filterInput = function(values, name) {
                  tags$select(
                  # Set to undefined to clear the filter
                  onchange = sprintf("Reactable.setFilter('cars-select', '%s', event.target.value || undefined)", name),
                  # "All" has an empty value to clear the filter, and is the default option
                  tags$option(value = "", "All"),
                  lapply(unique(values), tags$option),
                  "aria-label" = sprintf("Filter %s", name),
                  style = "width: 100%; height: 28px;"
                )}),
              authors = colDef(show = TRUE, minWidth = 350, filterable = FALSE, 
                                      cell = function(value, index) {
                                        title <- refs$title[index]
                                        div(
                                            div(title),
                                            div(style = "font-weight: 200", value),
                                            div(style = "font-weight: 200", refs$venue[index]),
                                          )}),
              url = colDef(maxWidth = 23, show = TRUE, filterable = FALSE, cell = function(value, index) {
                if (is.na(refs[index, "url"])) {
                  url <- as.character(refs[index, "doi"])
                  htmltools::tags$a(href = url, target = "_blank", '\U29C9')
                } else {
                  url <- sprintf("publications/%s", refs[index, "url"])
                  htmltools::tags$a(href = url, target = "_blank", '\U2193')
                }
              }),
          type = colDef(maxWidth = 115, show = TRUE,
            filterInput = function(values, name) {
            tags$select(
            # Set to undefined to clear the filter
            onchange = sprintf("Reactable.setFilter('cars-select', '%s', event.target.value || undefined)", name),
            # "All" has an empty value to clear the filter, and is the default option
            tags$option(value = "", "All"),
            lapply(unique(values), tags$option),
            "aria-label" = sprintf("Filter %s", name),
            style = "width: 100%; height: 28px;"
          )}
    )
  ))
```
:::