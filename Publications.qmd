---
title: "Publications"
execute:
  echo: false
  warning: false
---

```{r}
#|output: false
#|echo: false
library(reactable)
library(tidyverse)
library(htmltools)
refs <- read_csv("publications/publications.csv")
```

```{r}
refs_clean <- refs %>% 
  mutate(citation = sprintf("%s. (%d). %s %s.", authors, year, title, venue), .before = type) %>% 
           select(-abstract, -editors, -numbers, -title, -venue) %>% 
  relocate(type, .after = url)
         
reactable(refs_clean, filterable = TRUE, searchable = TRUE, defaultSorted = c("year", "authors"), elementId = "cars-select",
          columns = list(
    doi = colDef(show = FALSE),
    year = colDef(show = FALSE),
    authors = colDef(show = FALSE),
    inpress = colDef(show = FALSE),
    citation = colDef(minWidth = 350, filterable = FALSE),
    url = colDef(filterable = FALSE, cell = function(value, index) {
    # Render as a link
    url <- sprintf("publications/%s", refs[index, "url"], value)
    htmltools::tags$a(href = url, target = "_blank", '\U21A7')
  }),
    type = colDef(
      filterInput = function(values, name) {
        tags$select(
          # Set to undefined to clear the filter
          onchange = sprintf("Reactable.setFilter('cars-select', '%s', event.target.value || undefined)", name),
          # "All" has an empty value to clear the filter, and is the default option
          tags$option(value = "", "All"),
          lapply(unique(values), tags$option),
          "aria-label" = sprintf("Filter %s", name),
          style = "width: 100%; height: 28px;"
        )
      }
    )
  ))
```